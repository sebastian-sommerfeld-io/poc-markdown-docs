{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Poc Markdown Docs","text":"<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p> <p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p>"},{"location":"about/","title":"About this Project","text":"<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p>"},{"location":"about/code-of-conduct/","title":"Code of Conduct","text":""},{"location":"about/code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"about/code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"about/code-of-conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"about/code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"about/code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at sebastian@sommerfeld.io. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"about/code-of-conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"about/code-of-conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"about/code-of-conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"about/code-of-conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"about/code-of-conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"about/code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"about/contribute/","title":"Contribute to this Project","text":""},{"location":"about/contribute/#code","title":"Code","text":"<p>We're thrilled that you'd like to contribute to this project. You can do this by submitting a pull request.</p> <ul> <li>Take a look at our xref:development-guide.adoc[] to get an idea of how we work</li> <li>Fork and clone the repository</li> <li>Create a new branch: <code>git checkout -b my-branch-name</code></li> <li>Make your changes and include tests (preferably by using TDD)</li> <li>Make sure the tests pass</li> <li>Format code and build artifacts</li> <li>Push to your fork and submit a pull request</li> <li>Pat your self on the back and wait for your pull request to be reviewed and merged</li> </ul> <p>Here are a few things you can do that will increase the likelihood of your pull request being accepted:</p> <ul> <li>Write tests</li> <li>Make sure the documentation (docs folder) and any other relevant documentation are kept up-to-date</li> <li>We try to follow SemVer v2.0.0 so randomly breaking public APIs is not an option</li> <li>Keep your change as focused as possible - If there are multiple changes you would like to make that are not dependent upon each other, consider submitting them as separate pull requests</li> <li>Write a link:https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html[good commit message]</li> </ul>"},{"location":"about/contribute/#bug-reports","title":"Bug Reports","text":"<p>We'd love to hear your feedback on this project. Please feel free to submit an issue explaining the bug you've found. Please use the issue template for Bug Reports to ensure that we have all the necessary information to reproduce the bug.</p>"},{"location":"about/contribute/#feature-requests","title":"Feature Requests","text":"<p>We'd love to hear your feedback on this project. Please feel free to submit an issue explaining your feature request. We're also open to ideas and suggestions for improvements.</p> <p>To increase the likelihood of your feature request being accepted, please write your request in the form of a user story and add some acceptance criteria (which ideally can be turned into automated tests).</p>"},{"location":"about/development-guide/","title":"Development Guide","text":"<p>This section outlines the way we develop this project, focusing on development, tooling, deployment, and support considerations. It outlines the practices and principles we value.</p>"},{"location":"about/development-guide/#development-principles","title":"Development Principles","text":"<p>We follow a set of development principles that guide our work on this project. These principles are designed to ensure that our development process is efficient, effective, and aligned with best practices.</p>"},{"location":"about/development-guide/#everything-as-code","title":"Everything as Code","text":"<p>We embrace treating as much as possible as code, incorporating best practices from software development in every aspect of our work. We prioritize utilizing technologies and tools that allow us to leverage version control and adhere to established development practices like branching and code reviews. This applies to source code, infrastructure code, utility scripts, and basically everything that can be depicted as some sort of code.</p> <p>When it comes to configuration management, we opt for approaches that align with software development principles. If there are multiple ways to apply a configuration, such as through a web UI or an API, we prioritize the API method. This preference is due to its reproducibility, (hopefully) idempotence, and potential for automation, ensuring consistency and facilitating efficient management of configurations.</p> <p>By treating various aspects of our work as code, we can leverage the benefits of version control, automation, and reproducibility.</p>"},{"location":"about/development-guide/#test-driven-development","title":"Test Driven Development","text":"<p>We follow Test-Driven Development (TDD) principles, using TDD to design our systems.</p>"},{"location":"about/development-guide/#version-control","title":"Version Control","text":"<p>We make all changes to code, test, infrastructure, configuration, and ultimately production via version control.</p> <p>Version control extends beyond just managing code repositories like Git. It encompasses a broader scope that includes controlling the versions of tools and third-party software utilized within our environments. By actively managing these dependencies, we ensure that our software remains stable, consistent, and immune to uncontrolled changes originating from external sources.</p> <p>We employ version control to manage and track changes made to our production systems, ensuring that modifications are controlled, traceable, and reversible.</p> <p>By extending version control to encompass the management of tools, third-party software, and production environments, we maintain a firm grip on the external factors that can impact our software development and runtime environments. This approach allows us to minimize the risk of uncontrolled changes.</p>"},{"location":"about/development-guide/#trunk-based-development","title":"Trunk-Based Development","text":"<p>We follow a trunk-based development approach, which means that we primarily focus our development efforts on the <code>main</code> branch of our repository. This approach encourages frequent and continuous integration of code changes into the <code>main</code> branch, allowing us to avoid long-lived feature branches and promote a fast-paced development cycle. We still rely on branching and Pull Requests, but our branches do not live for longer than one day (more on that in the coming sections).</p> <p>The <code>main</code> branch represents the releasable state of the software. It serves as the mainline branch from which stable releases are made.</p> <p>Any branch other than <code>main</code> is considered a short-lived branch. These branches are used for feature development, bug fixing, and any other updates. There are no specific naming conventions for these branches. These branches do not live for longer than one day.</p> <p>Git tags are always created from the <code>main</code> branch, ensuring that they represent stable and release-worthy versions of the software. The creation of tags is done exclusively through our deployment pipeline without manual interaction, ensuring consistent and reproducible release processes.</p> <p>Each developer is streaming small commits either into a short-lived branch with a pre-integration step of running the build first (which must pass) and integrates into the <code>main</code> branch through a Pull-Request.</p> <p>Basically we follow most recommendations from trunkbaseddevelopment.com.</p>"},{"location":"about/development-guide/#continuous-integration","title":"Continuous Integration","text":"<p>We integrate code changes from all developers at least once per day. This frequent integration ensures that our software is thoroughly tested and checked with everyone's changes on a daily basis.</p> <p>We work with short lived (feature) branches. But we won't hide work on separate branches for longer than a working day before integrating them together.</p> <p>We don't merge the <code>main</code> branch into our feature branches to make them live longer! This is not a way to integrate everyone's changes into a single source of truth and prevents us from determining the releasability of our software.</p> <p>We grow our code incrementally, making frequent small changes to our code - leaving our code in a working state after each small change.</p> <p>We get feedback on the quality of our work after every small change through the use of automated tests in pipelines.</p>"},{"location":"about/development-guide/#automated-tests-determine-the-releasability","title":"Automated tests determine the releasability","text":"<p>We automate almost everything in our pipeline, and have enough automated testing to in place to validate and release our changes without dependence on manual regression testing, or approval QA and approval processes.</p> <p>Manual tests are not forbidden. But since they only make us feel better and more save instead of providing a real judgement on the releasability of our software, the make-it-or-break-it decision always comes from our pipeline.</p> <p>When we identify manual tests that are performed repeatedly, we actively work on transforming them into automated tests and integrate them into our pipelines.</p>"},{"location":"about/development-guide/#keep-the-software-always-in-a-releasable-state","title":"Keep the software always in a releasable state","text":"<p>While we may not release our software daily, our goal is to have the capability to release changes every day if required. That means we aim to ship a release-candidate at least once per day. To achieve this goal we have to keep our software in a releasable state all the time!</p>"},{"location":"about/development-guide/#commit-messages","title":"Commit Messages","text":"<p>We use semantic-release to create Git tags and GitHub releases.It uses the latest Git tag to determine the current version of your project. When you run semantic-release, it analyzes your commit messages since the last release to determine the next version number.</p> <p>Each commit message consists of a header, a body, and a footer (each separated by a blank line). This specification is inspired by the AngularJS commit message format. The <code>header</code> is mandatory. The <code>body</code> and <code>footer</code> are optional.</p> <pre><code>&lt;type&gt;: &lt;short summary&gt;\n  \u2502       \u2502\n  \u2502       +-&gt; Summary in present tense. Not capitalized. No period at the end.\n  \u2502\n  +-&gt; Commit Type: build|ci|docs|feat|fix|perf|refactor|test\n</code></pre> <p>The <code>&lt;type&gt;</code> and <code>&lt;summary&gt;</code> fields are mandatory. The <code>type</code> must be one of the following:</p> <ul> <li>build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)</li> <li>ci: Changes to our CI configuration files and scripts (examples: CircleCi, SauceLabs)</li> <li>chore: Changes that don't modify src or test files (example: updating tasks, linting, etc.)</li> <li>docs: Documentation only changes</li> <li>feat: A new feature</li> <li>fix: A bug fix</li> <li>perf: A code change that improves performance</li> <li>refactor: A code change that neither fixes a bug nor adds a feature</li> <li>revert: Reverts a previous commit</li> <li>style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)</li> <li>test: Adding missing tests or correcting existing tests</li> </ul> <p>Use the summary field to provide a succinct description of the change:</p> <ul> <li>use the imperative, present tense: \"change\" not \"changed\" nor \"changes\"</li> <li>don't capitalize the first letter</li> <li>no dot (.) at the end</li> </ul> <p>Just as in the summary, use the imperative, present tense: \"fix\" not \"fixed\" nor \"fixes\". Explain the motivation for the change in the commit message body. This commit message should explain why you are making the change. You can include a comparison of the previous behavior with the new behavior in order to illustrate the impact of the change.</p> <p>The footer can contain information about breaking changes and deprecations and is also the place to reference GitHub issues and PRs that this commit closes or is related to.</p> <pre><code>BREAKING CHANGE: &lt;breaking change summary&gt;\n&lt;BLANK LINE&gt;\n&lt;breaking change description + migration instructions&gt;\n&lt;BLANK LINE&gt;\nFixes #&lt;issue number&gt;\n</code></pre> <p>Breaking Change section should start with the phrase \"BREAKING CHANGE: \" followed by a summary of the breaking change, a blank line, and a detailed description of the breaking change that also includes migration instructions.</p> <pre><code>DEPRECATED: &lt;what is deprecated&gt;\n&lt;BLANK LINE&gt;\n&lt;deprecation description + recommended update path&gt;\n&lt;BLANK LINE&gt;\nCloses #&lt;pr number&gt;\n</code></pre> <p>Similarly, a Deprecation section should start with \"DEPRECATED: \" followed by a short description of what is deprecated, a blank line, and a detailed description of the deprecation that also mentions the recommended update path.</p>"},{"location":"about/development-guide/#semantic-versioning-for-our-releases","title":"Semantic Versioning for our Releases","text":"<p>At our organization, we adhere to Semantic Versioning (SemVer) principles when releasing artifacts. This means that we follow a structured versioning format, consisting of major, minor, and patch numbers, to indicate changes and updates in our software. Unstable versions are marked as Alpha or Beta version.</p> <p>Key definitions of Semantic Versioning:</p> <ul> <li>A normal version number must take the form <code>major.minor.bugfix</code> in non-negative integers, and must not contain leading zeroes. Each element must increase numerically. For instance: <code>1.9.0</code> -&gt; <code>1.10.0</code> -&gt; <code>1.11.0</code>.</li> <li>Once a versioned package has been released, the contents of that version must not be modified. Any modifications must be released as a new version.</li> <li>Major version zero (<code>0.x.x</code>)` is for initial development. Anything MAYmay change at any time. The public API should not be considered stable.</li> <li>Version <code>1.0.0</code> defines the initial public API.</li> <li>Patch version (<code>x.x.patch</code>) must be incremented if only backward compatible bug fixes are introduced. A bug fix is defined as an internal change that fixes incorrect behavior.</li> <li>Minor version (<code>x.minor.x</code>) must be incremented if new, backward compatible functionality is introduced to the public API. It must be incremented if any public API functionality is marked as deprecated. It may be incremented if substantial new functionality or improvements are introduced within the private code. It may include patch level changes. Patch version must be reset to 0 when minor version is incremented.</li> <li>Major version (<code>major.x.x</code>) must be incremented if any backward incompatible changes are introduced to the public API. It may also include minor and patch level changes. Patch and minor versions must be reset to 0 when major version is incremented.</li> </ul> <p>Our Git tags always include a leading \"v\" before the version number.</p>"},{"location":"about/development-guide/#releases-and-deployments-always-are-done-through-a-pipeline","title":"Releases and Deployments always are done through a pipeline","text":"<p>This means that all deployments to any test or production environment, whether it's a software version to some test environment or to production or a Docker image to DockerHub or any other kind of deployment, are carried out automatically via our deployment pipeline.</p> <p>We deploy our changes into production based on the commit messages. We automate the deployment process as much as possible, so (according to the commit message) we create tags based on the commit message and trigger the deployment pipeline. Commit messages with the type <code>fix</code> or <code>feat</code> will trigger a new bugfix or minor release, respectively. A commit message with the type <code>BREAKING CHANGE</code> will trigger a major release. Releases are always based on the <code>main</code> branch.</p>"},{"location":"about/development-guide/#docker-tag-strategy","title":"Docker Tag Strategy","text":"<p>The Docker tag strategy follows Semantic Versioning for our releases.</p>"},{"location":"about/development-guide/#artifacts-are-immutable","title":"Artifacts are immutable","text":"<p>We are validating the delivered artifact with the pipeline. It is built once and deployed to all environments. A common anti-pattern is building an artifact for each environment. Each build is a possibility to introduce unintended changes. By promoting a single artifact through the stages we ensure that the deployed artifact is exactly the one that was tested.</p>"},{"location":"about/development-guide/#ecosystem","title":"Ecosystem","text":"<p>Our development ecosystem consists of a set of tools, technologies, and practices that support our development process. This ecosystem is designed to provide a consistent, efficient, and effective environment for developing, testing, and deploying our software.</p>"},{"location":"about/development-guide/#packaging-and-distribution","title":"Packaging and Distribution","text":"<p>The application will be packaged and published solely as a Docker image. No other package format will be supported.</p>"},{"location":"about/development-guide/#development-environment","title":"Development Environment","text":"<p>Development primarily occurs on Ubuntu workstations. The IDE of choice for development is Visual Studio Code (VSCode). VSCode is preferred due to its support for DevContainers (an essential requirement) and GitHub Copilot.</p>"},{"location":"about/development-guide/#ai-support","title":"AI Support","text":"<p>Development efforts are supported by GitHub Copilot, with the potential for heavy reliance on this AI-assistant as its usefulness is validated over time.</p>"},{"location":"about/development-guide/#source-code-hosting","title":"Source Code Hosting","text":"<p>All related projects are hosted on GitHub.</p>"},{"location":"about/development-guide/#pipelines-and-workflows","title":"Pipelines and Workflows","text":"<p>The pipeline and workflow engine of choice is GitHub Actions.</p>"},{"location":"about/development-guide/#application-language-and-build-tool","title":"Application Language and Build Tool","text":"<p>...</p>"},{"location":"about/development-guide/#coding-style-guide","title":"Coding Style Guide","text":"<p>We follow a set of coding style guidelines to ensure that our code is consistent, readable, and maintainable. These guidelines cover various aspects of coding, including naming conventions, formatting, and documentation.</p>"},{"location":"about/development-guide/#go-code-style-example","title":"Go Code Style (example)","text":"<p>...</p>"},{"location":"about/development-guide/#error-handling","title":"Error Handling","text":"<p>...</p>"},{"location":"about/development-guide/#some-more-stuff","title":"Some more stuff","text":"<p>...</p>"},{"location":"about/development-guide/#task-management","title":"Task Management","text":"<p>To ensure that our development process is organized and efficient, we use a task management system to track and manage our work. This system helps us prioritize tasks, assign work, and track progress throughout the development lifecycle.</p>"},{"location":"about/development-guide/#task-and-todo-tracking","title":"Task and Todo Tracking","text":"<p>All task and todo tracking will be done through a GitHub project.</p>"},{"location":"about/development-guide/#user-stories","title":"User Stories","text":"<p>We want requirements to define small focused needs rather than vast vague projects. We use user stories to describe our requirements. We try to finish a user story within a couple of days at most. We need to keep in mind, that we integrate our changes daily, so we must design our user stories accordingly.</p> <p>If we can't think of user need in terms of a story, we don't understand what our software is meant to achieve yet. If we can't think of an example, that would demonstrate that the need is fulfilled, we don't really understand the problem (domain) yet.</p>"},{"location":"about/development-guide/#architecture-decisions","title":"Architecture Decisions","text":"<p>We use architecture decision records (ADRs) to document the key decisions made during the development of the CLI documentation tool. ADRs help us track the context, considerations, and outcomes of each decision, providing a clear rationale for future reference.</p> <p>We treat ADRs as working items, updating them as necessary to reflect the current state of the issue. Thats why we manage and track ADRs as GitHub issues. This approach allows us to easily reference and link to ADRs from other parts of the documentation and use the GitHub issue for collaboration and discussion.</p> <p>See all issues labeled as ADR for a list of all ADRs.</p>"},{"location":"about/license/","title":"MIT License","text":"<p>Copyright (c) 2024 sommerfeld-io</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/project-structure/","title":"Project and Repository Structure","text":""},{"location":"about/project-structure/#filesystem-structure","title":"Filesystem Structure","text":"<p>This is the structure of the repository with the most important directories and files. There is of course more in the repository, but the important parts are listed here.</p> <pre><code>+--+  components\n|  +---  app                   # The main application code\n|  +---  configs               # Configuration files used in Docker images\n|  +---  test-acceptance       # BDD-style Acceptance tests\n|  +---  test-compliance       # Compliance tests with Chef Inspec\n+---  docs                     # Documentation (Antora component)\n+---  testdata                 # Test data for all kinds of tests\n+---  Dockerfile               # Multi-Stage Dockerfile for the main applicationwebsite\n+---  docker-compose.yml       # Docker Compose file with the toolchain (e.g. for local development)\n</code></pre>"},{"location":"about/project-structure/#pipeline","title":"Pipeline","text":"<p>The build pipeline is triggered by a commit to any branch in the repository. But not all branches are treated equally. The <code>main</code> branch is the most important branch in the repository. It is the branch that is always deployable and is the branch that is used to deploy to production. Other branches use a subset of the pipeline to ensure that they can be merged into the <code>main</code> branch and are are in a deployable state.</p> <p></p>"},{"location":"about/project-structure/#docker-scout-scan","title":"Docker Scout Scan","text":"<p>We use the <code>docker-scout</code> tool to scan the Docker image for vulnerabilities. The tool is run as part of the Docker image build process in out pipeline. The tool is configured not to break the build, but to provide a report of the vulnerabilities found in the image. The report is then used to decide if the image is safe or if it needs to be fixed.</p> <p></p>"},{"location":"about/project-structure/#docker-image-build","title":"Docker Image Build","text":"<p>The Docker image build process is separated into multiple steps. The image is a Multi-Stage Dockerfile to ensure that the final image is as small as possible with as few dependencies as possible. Part of the build process is to run unit tests and acceptance tests to ensure that the image is working as expected. For more information, see link:https://github.com/sommerfeld-io/source2adoc/blob/main/Dockerfile[Dockerfile].</p>"},{"location":"about/security/","title":"Security Policy","text":""},{"location":"about/security/#supported-versions","title":"Supported Versions","text":"<p>We only provide security updates for the latest release. This means that we recommend using the Docker images tagged with the latest version or the <code>latest</code> tag. Whenever we fix an issue, we release a new version that includes the fix. We do not provide security updates for older versions.</p>"},{"location":"about/security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>We deeply appreciate any effort to discover and disclose security vulnerabilities responsibly.</p> <p>If you would like to report a vulnerability, or have security concerns regarding this project, please do not submit an issue. Instead, please email sebastian@sommerfeld.io.</p> <p>In order for us to best respond to your report, please include any of the following:</p> <ul> <li>Steps to reproduce or proof-of-concept</li> <li>Any relevant tools, including versions used</li> <li>Tool output</li> </ul>"},{"location":"about/security/#detecting-vulnerabilities","title":"Detecting Vulnerabilities","text":"<p>We prioritize the security of our project and take proactive measures to detect vulnerabilities. As part of our continuous integration and delivery process, we scan our Docker images using Docker Scout in every pipeline run and for every pull request. This ensures that any potential vulnerabilities are identified and addressed promptly.</p>"},{"location":"about/terms/","title":"Terms of Use + Privacy Policy","text":"<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p>"},{"location":"about/terms/#diagrams","title":"Diagrams","text":"<p>To display diagrams on our documentation website, we rely on Kroki. This means that we send the diagram data to Kroki for rendering. The data originates from the diagram definitions contained within this repository.</p>"},{"location":"usage/","title":"Getting started","text":"<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p>"}]}